@page "/Login"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using Users

<EditForm Model="@User" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <h1>Login</h1>
    <div>
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="User.Username" />
        <ValidationMessage For="@(() => User.Username)" />
    </div>

    <div class="mt-3">
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="User.Password" type="password" />
        <ValidationMessage For="@(() => User.Password)" />
    </div>

    <button type="submit">Login</button>
    <button type="button" class="ms-2 mt-3" @onclick="@(() => NavigationManager.NavigateTo("/Signup"))">Not Signed Up</button>
</EditForm>

<p class="mt-3">
    Testing credentials:<br />
    Username: <strong>testuser</strong><br />
    Password: <strong>testpassword</strong><br />
</p>

@code {
    public class UserRegistration
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        public string Password { get; set; }
    }
    
    protected async override void OnInitialized()
    {
        // Check if user is already logged in
        var userSession = await JS.InvokeAsync<string>("sessionStorage.getItem", "User");
        if (!string.IsNullOrEmpty(userSession))
        {
            NavigationManager.NavigateTo("/"); // Redirect to home page if already logged in
        }
    }

    public List<User> users = new List<User>(){
        new User { Username = "testuser", Email = "testuser@example.com", Password = "testpassword" }
    }; // This should be replaced with actual user storage logic
    public async Task HandleValidSubmit()
    {
        foreach (var user in users)
        {
            if (user.Username != User.Username || user.Password != User.Password)
            {
                // User not found or password incorrect
                await JS.InvokeVoidAsync("alert", "Invalid username or password.");
                return;
            }
        }


        var submission = new
        {
            User.Username,
            User.Password,
            RegisteredEvents = new List<int>() // Assuming user can register for multiple events
        };

        var json = JsonSerializer.Serialize(submission);
        await JS.InvokeVoidAsync("sessionStorage.setItem", "User", json);

        NavigationManager.NavigateTo("/"); // Redirect to home page after registration
    }

    public UserRegistration User { get; set; } = new UserRegistration();
}

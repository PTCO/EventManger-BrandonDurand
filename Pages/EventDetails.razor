@page "/Event/{eventId:int}"
@using Events
@using Users
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject EventServices EventService
@inject IJSRuntime JS

<h3>Event Details</h3>

<div>
    <strong>Event Name:</strong> @eventDetails.EventName
</div>
<div>
    <strong>Date:</strong> @(eventDetails.EventDate.HasValue ? eventDetails.EventDate.Value.ToString("yyyy-MM-dd") : "N/A")
</div>
<div>
    <strong>Location:</strong> @eventDetails.EventLocation
</div>
<div class="d-flex align-items-center border-bottom border-black my-3 pb-3">
    <strong>Already Registered :</strong>
    <p class="ms-2 border rounded mb-0 px-2 py-1 text-white @(eventDetails.IsRegistered ? "bg-success": "bg-danger")">
        @(eventDetails.IsRegistered ? "Yes": "No")
    </p>
</div>

@if(!NavigationManager.Uri.Contains("Register") && !eventDetails.IsRegistered)
{
    <div class="flex align-items-center mt-3">
        <button class="btn btn-secondary" @onclick="@(() => NavigationManager.NavigateTo("/"))">Back to Events</button>
        <button class="btn btn-primary" @onclick="() => RegisterForEvent()">Register</button>
    </div>
}
else if (eventDetails.IsRegistered) {
    <div class="alert alert-success">
        You are already registered for this event.
    </div>
    <button class="btn btn-secondary" @onclick="@(() => NavigationManager.NavigateTo("/"))">Back to Events</button>
}



@code {
    [Parameter]
    public int eventId { get; set; }
    public Events.EventDetails eventDetails = new Events.EventDetails();
    protected async override void OnInitialized()
    {
        eventDetails = EventServices.getEvent(eventId);
        var userSession = await JS.InvokeAsync<string>("sessionStorage.getItem", "User");
        if (!string.IsNullOrEmpty(userSession))
        {
            var user = JsonSerializer.Deserialize<User>(userSession);
            // Deserialize session data if needed
            foreach (var item in user.RegisteredEvents)
            {
                var registeredEvent = JsonSerializer.Deserialize<Events.EventDetails>(item.ToString());
                if (registeredEvent != null && registeredEvent.EventId == eventId)
                {
                    eventDetails.IsRegistered = true; // Set the registration status based on session data
                    break;
                }
            }
        }
        StateHasChanged(); // Ensure the UI updates after fetching event details
    }

    private void RegisterForEvent()
    {
        // Logic to handle event registration
        // This could involve navigating to a registration page or showing a confirmation message
        NavigationManager.NavigateTo($"/Event/{eventDetails.EventId}/Register");
    }
}

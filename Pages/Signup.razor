@page "/Signup"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json

<EditForm Model="@User" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="username">Username:</label>
        <InputText id="username" @bind-Value="User.Username" />
        <ValidationMessage For="@(() => User.Username)" />
    </div>

    <div>
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="User.Email" />
        <ValidationMessage For="@(() => User.Email)" />
    </div>

    <div>
        <label for="password">Password:</label>
        <InputText id="password" @bind-Value="User.Password" type="password" />
        <ValidationMessage For="@(() => User.Password)" />
    </div>

    <div>
        <label for="confirmPassword">Confirm Password:</label>
        <InputText id="confirmPassword" @bind-Value="User.ConfirmPassword" type="password" />
        <ValidationMessage For="@(() => User.ConfirmPassword)" />
    </div>

    <button type="submit">Sign Up</button>
</EditForm>

@code {
    public class UserRegistration
    {
        [Required(ErrorMessage = "Username is required.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [StringLength(100, ErrorMessage = "Password must be at least 6 characters long.", MinimumLength = 6)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }

    public async Task HandleValidSubmit()
    {
        var submission = new
        {
            User.Username,
            User.Email,
            User.Password,
            RegisteredEvents = new List<int>() // Assuming user can register for multiple events
        };

        var json = JsonSerializer.Serialize(submission);
        await JS.InvokeVoidAsync("sessionStorage.setItem", "User", json);

        NavigationManager.NavigateTo("/"); // Redirect to home page after registration
    }

    public UserRegistration User { get; set; } = new UserRegistration();
}
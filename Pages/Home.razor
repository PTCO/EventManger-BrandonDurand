@page "/"
@using Events
@using Users
@using System.Text.Json

@inject ScrollServices ScrollServices
@inject NavigationManager NavigationManager
@inject EventServices EventServices
@inject IJSRuntime JS

<PageTitle>Events</PageTitle>

<div>

    <h1 class="text-center"><strong>@User.Username</strong> -  Welcome to EventEase</h1>
</div>

<h3>Upcoming Events</h3>

@if (events == null)
{
    <p>Loading events...</p>
}
else if (!events.Any())
{
    <p>No events found.</p>
}
else
{
    <ul id="scrollableDiv" class="list-group border-bottom border-5 border-gray-400"
        @onwheel="@(() => HandleScroll())"
        style="height: 80vh; overflow-y: auto;">
        @foreach (var evt in events)
        {
            <EventCard EventId="@evt.EventId" ViewEvent="@(async (url) => await NavigateToUrl(url))" />
        }
    </ul>
}

@code {
    private List<Events.EventDetails> events = new();
    private User User = new User();

    protected async override void OnInitialized()
    {
        events = EventServices.getEvents();
        var sessionValue = await JS.InvokeAsync<string>("sessionStorage.getItem", "Registration");
        var user = await JS.InvokeAsync<string>("sessionStorage.getItem", "User");
        if(string.IsNullOrEmpty(user))
        {
            NavigationManager.NavigateTo("/Login"); // Redirect to home if user is already registered
        }
        else {
            User = JsonSerializer.Deserialize<User>(user);
        }
        StateHasChanged(); // Ensure the UI updates after fetching events
    }

    private async Task HandleScroll()
    {
        await ScrollServices.HandleScroll("scrollableDiv");
    }

    private async Task NavigateToUrl(string url)
    {
        NavigationManager.NavigateTo(url);
        await Task.CompletedTask; // just to match the async signature
    }
}